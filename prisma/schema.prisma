// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Student {
  id                  String                 @id @default(cuid())
  firstName           String
  middleName          String?
  secondName          String
  dateOfBirth         DateTime
  genderId            String
  gradeAvg            Float
  nationality         String
  passSn              String
  passDivCode         String
  passIssueDate       DateTime
  passIssueBy         String
  birthplace          String
  residentialAddress  String
  registrationAddress String
  phone               String?
  email               String?                @unique
  snils               String
  parentsContacts     String?
  createdAt           DateTime               @default(now()) @map(name: "created_at")
  updatedAt           DateTime               @updatedAt @map(name: "updated_at")
  specialities        StudentsSpecialities[]
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String
  image          String?
  sessions       Session[]
  Account        Account[]
  role           String    @default("user")
  createdAt      DateTime  @default(now()) @map(name: "created_at")
  updatedAt      DateTime  @updatedAt @map(name: "updated_at")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model StudentsSpecialities {
  speciality   Speciality @relation(fields: [specialityId], references: [id])
  specialityId String
  student      Student    @relation(fields: [studentId], references: [id])
  studentId    String
  isOriginal   Boolean
  isBudget     Boolean
  createdAt    DateTime   @default(now()) @map(name: "created_at")

  @@id([studentId, specialityId])
}

model Speciality {
  id       String                 @id @default(cuid())
  name     String?
  students StudentsSpecialities[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
